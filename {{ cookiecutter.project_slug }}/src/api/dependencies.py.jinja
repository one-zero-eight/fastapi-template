{%- if cookiecutter.innohassle_accounts -%}
__all__ = ["USER_AUTH", "get_current_user_auth"]

from typing import Annotated

from fastapi import Depends
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer

from src.api.exceptions import IncorrectCredentialsException
from src.modules.tokens.repository import TokenRepository
from src.modules.user.schemas import UserAuthData

bearer_scheme = HTTPBearer(
    scheme_name="Bearer",
    description="Token from [InNoHassle Accounts](https://api.innohassle.ru/accounts/v0/tokens/generate-my-token)",
    bearerFormat="JWT",
    auto_error=False,  # We'll handle error manually
)


async def get_current_user_auth(
    bearer: HTTPAuthorizationCredentials | None = Depends(bearer_scheme),
) -> UserAuthData:
    # Prefer header to cookie
    token = bearer and bearer.credentials
    if not token:
        raise IncorrectCredentialsException(no_credentials=True)
    token_data = await TokenRepository.verify_user_token(token, IncorrectCredentialsException())
    return token_data


USER_AUTH = Annotated[UserAuthData, Depends(get_current_user_auth)]
{%- elif cookiecutter.session -%}
__all__ = ["USER_AUTH", "get_current_user_auth"]

from typing import Annotated

from beanie import PydanticObjectId
from fastapi import Depends, HTTPException
from starlette.requests import Request

from src.api.exceptions import IncorrectCredentialsException
from src.modules.user.repository import user_repository
from src.modules.user.schemas import UserAuthData


async def get_current_user_auth(request: Request) -> UserAuthData:
    uid = request.session.get("uid")

    if uid is None:
        raise IncorrectCredentialsException(no_credentials=True)
    {%- if cookiecutter.database == "mongo" %}

    user_id = PydanticObjectId(uid)
    {%- elif cookiecutter.database == "postgres" %}

    user_id = str(uid)
    {%- endif %}

    exists = await user_repository.exists(user_id)
    if not exists:
        request.session.clear()
        raise IncorrectCredentialsException()

    banned = await user_repository.is_banned(user_id)
    if banned:
        raise HTTPException(status_code=403, detail="You are banned ðŸ¥¹")

    return UserAuthData(user_id=user_id)

USER_AUTH = Annotated[UserAuthData, Depends(get_current_user_auth)]
{%- else -%}
__all__ = ["USER_AUTH", "get_current_user_auth"]

from typing import Annotated

from fastapi import Depends


def get_current_user_auth():
    raise NotImplementedError


USER_AUTH = Annotated[None, Depends(get_current_user_auth)]
{%- endif %}
